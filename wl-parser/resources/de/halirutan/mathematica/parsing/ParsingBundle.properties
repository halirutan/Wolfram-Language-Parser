#
# Copyright (c) 2014 Patrick Scheibe
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

General.input=More input expected
General.eof=More input expected
General.expr.expected.before.comma=Expression expected before ','
General.unexpected.character=Unexpected {0}
General.expected.character={0} expected
General.closing=Closing {0} expected
General.expr.expected=Expression expected
General.expr.expected.after=Expression expected after {0}



MessageName.no.symbol.or.string=MessageName expects Symbol or String here
MessageName.arg=Symbol or String expected as tag in symbol\:\:tag
Put.rhs=Could not parse right hand side of Put or PutAppend expression
Get.stringified.symbol.expected=File- or  package-path, or string expected
Association.critical.error=Association token does not start with <|
Association.closing=Closing '|>' expected
Part.empty=Part list[[...]] expression cannot be empty
Infix.missing.tilde='~' expected in infix notation
Infix.operator.missing=Operator op in 'a ~ op ~ b' expected for infix notation
Infix.missing.arg2=Argument arg2 missing in 'arg1 ~ op ~ arg2'
Critical.list=List parselet does not start with {
Pattern.error=Could not parse pattern or optional argument expression
Critical.span=SPAN token ';;' expected
Critical.tagset=Expected token TAG_SET
TagSet.missing.pattern=Missing 'expr' between '/\:' and '\:\='
TagSet.missing.set=Missing '\:\=','\=' or '\=.' needed to complete TagSet
